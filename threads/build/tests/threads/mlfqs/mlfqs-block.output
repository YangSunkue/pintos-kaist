Kernel command line: -q -mlfqs run mlfqs-block
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  19,635,200 loops/s.
Boot complete.
Executing 'mlfqs-block':
(mlfqs-block) begin
(mlfqs-block) Main thread acquiring lock.
(mlfqs-block) Main thread creating block thread, sleeping 25 seconds...
(mlfqs-block) Block thread spinning for 20 seconds...
(mlfqs-block) Block thread acquiring lock...
(mlfqs-block) Main thread spinning for 5 seconds...
(mlfqs-block) Main thread releasing lock.
(mlfqs-block) ...got it.
(mlfqs-block) Block thread should have already acquired lock.
(mlfqs-block) end
Execution of 'mlfqs-block' complete.
Timer: 3030 ticks
Thread: 499 idle ticks, 2532 kernel ticksInterrupt 0x0d (#GP General Protection Exception) at rip=8004207fbc
 cr2=0000000000000000 error=               0
rax cccccccccccccc4c rbx 0000000000204400 rcx 0000000000000073 rdx 00000000fffe99db
rsp 0000008004000c90 rbp 0000008004000ca0 rsi 00000000666666a7 rdi cccccccccccccc4c
rip 0000008004207fbc r8 0000008004000ec8  r9 0000008004217264 r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00200082
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x8004213f7c 0x80042092bc 0x800420966e 0x8004208343 0x800420dcc0 0x8004209250 0x800420966e 0x80042083d0 0x800420ebe9 0x8004217330 0x80042172a1 0x80042114c8 0x8004217150 0x800421147f 0x8004206c77 0x8004206827 0x80042067dd 0x800420613d.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 3032 ticks
Thread: 499 idle ticks, 2533 kernel ticks, 0 user ticks
Console: 1